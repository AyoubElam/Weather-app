/* eslint-disable @typescript-eslint/no-unused-vars */
"use client";
import Head from 'next/head';
import axios from 'axios';
import { useState } from 'react';
import { BsSearch } from 'react-icons/bs';
import Weather from '../components/Weather';
import Spinner from '../components/Spinner';

interface WeatherData {
  main?: {
    temp: number;
    feels_like: number;
    humidity: number;
  };
  weather?: Array<{ icon: string; main: string }>;
  wind?: { speed: number };
  name?: string;
}

export default function Home() {
  const [city, setCity] = useState<string>('');
  const [weather, setWeather] = useState<WeatherData | null>(null); // Changed to null
  const [loading, setLoading] = useState<boolean>(false);

  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

  const fetchWeather = (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    axios
      .get(url)
      .then((response) => {
        setWeather(response.data); // Update state with the response
        setLoading(false); // Set loading false after data is fetched
      })
      .catch((error) => {
        console.error(error);
        setLoading(false);
      });
    setCity('');
  };

  if (loading) {
    return <Spinner />;
  }

  return (
    <div>
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Overlay */}
      <div className="absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-[1]" />

      <img
        src="https://images.unsplash.com/photo-1601134467661-3d775b999c8b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2575&q=80"
        alt="Background"
        className="w-full h-full object-cover bg-black/90"
      />

      {/* Search */}
      <div className="relative flex justify-between items-center max-w-[500px] w-full m-auto pt-4 px-4 text-white z-10">
        <form
          onSubmit={fetchWeather}
          className="flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl"
        >
          <div>
            <input
              onChange={(e) => setCity(e.target.value)}
              value={city}
              className="bg-transparent border-none text-white focus:outline-none text-2xl"
              type="text"
              placeholder="Search city"
            />
          </div>
          <button type="submit">
            <BsSearch size={20} />
          </button>
        </form>
      </div>

      {/* Weather */}
      {weather ? <Weather data={weather} /> : null} {/* Only render Weather if data is available */}
    </div>
  );
}
